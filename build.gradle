plugins {
    id "java"
    id "maven-publish"
    id "signing"
    id "idea"
    id "fabric-loom" version "1.10-SNAPSHOT"
}

base {
    group = project.maven_group
    archivesName = project.maven_name
    version = project.maven_version
    description = project.maven_description
}

repositories {
    mavenCentral()
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_version}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // ModMenu
    modImplementation fabricApi.module("fabric-api-base", project.fabric_api_version)
    modImplementation fabricApi.module("fabric-resource-loader-v0", project.fabric_api_version)
    modImplementation fabricApi.module("fabric-screen-api-v1", project.fabric_api_version)
    modImplementation fabricApi.module("fabric-key-binding-api-v1", project.fabric_api_version)
    modImplementation fabricApi.module("fabric-lifecycle-events-v1", project.fabric_api_version)
    modImplementation "com.terraformersmc:modmenu:13.0.2"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

processResources {
    filesMatching("fabric.mod.json") {
        expand(
                "version": project.version,
                "description": project.description,
                "mcVersion": mcVersion()
        )
    }
}

String mcVersion() {
    if (project.supported_versions.isEmpty()) {
        return project.minecraft_version
    } else {
        return project.supported_versions
    }
}

jar {
    // Rename the project's license file to LICENSE_<project_name> to avoid conflicts
    from("LICENSE") {
        rename {
            "${it}_${project.archivesBaseName}"
        }
    }
}

idea {
    module {
        ["run"].each {
            excludeDirs << file("$it")
        }
    }
}

publishing {
    repositories {
        maven {
            name = "reposilite"
            url = "https://maven.lenni0451.net/" + (project.version.endsWith("SNAPSHOT") ? "snapshots" : "releases")

            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
        maven {
            name = "ossrh"
            def releasesUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = project.version.endsWith("SNAPSHOT") ? snapshotsUrl : releasesUrl

            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version

            from components.java

            pom {
                name = artifactId
                description = project.description
                url = "https://github.com/FlorianMichael/SecondChat"
                licenses {
                    license {
                        name = "GPL-3.0 License"
                        url = "https://github.com/FlorianMichael/SecondChat/blob/main/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = "FlorianMichael"
                        name = "EnZaXD"
                        email = "florian.michael07@gmail.com"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/FlorianMichael/SecondChat.git"
                    developerConnection = "scm:git:ssh://github.com/FlorianMichael/SecondChat.git"
                    url = "github.com/FlorianMichael/SecondChat"
                }
            }
        }
    }
}

signing {
    setRequired false
    sign configurations.archives
    sign publishing.publications.maven
}

project.tasks.withType(PublishToMavenRepository).forEach {
    it.dependsOn(project.tasks.withType(Sign))
}
